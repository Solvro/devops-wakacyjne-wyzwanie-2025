# PostgreSQL PersistentVolumeClaim
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  labels:
    app: postgres
    tier: database
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
  storageClassName: standard

---

# PostgreSQL Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  labels:
    app: postgres
    tier: database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
        tier: database
    spec:
      containers:
      - name: postgres
        image: postgres:13
        env:
        - name: POSTGRES_DB
          value: "appdb"
        - name: POSTGRES_USER
          value: "appuser"
        - name: POSTGRES_PASSWORD
          value: "apppassword123"
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        ports:
        - containerPort: 5432
          name: postgres
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        resources:
          requests:
            cpu: 100m
            memory: 256Mi
          limits:
            cpu: 500m
            memory: 512Mi
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc

---

# PostgreSQL Service
apiVersion: v1
kind: Service
metadata:
  name: postgres-service
  labels:
    app: postgres
    tier: database
spec:
  type: ClusterIP
  selector:
    app: postgres
  ports:
  - port: 5432
    targetPort: 5432
    name: postgres

---

# Backend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
  labels:
    app: backend
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
        tier: backend
        version: "1.0"
    spec:
      containers:
      - name: backend
        image: kennethreitz/httpbin
        ports:
        - containerPort: 80
          name: http
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
        env:
        - name: DATABASE_URL
          value: "postgresql://appuser:apppassword123@postgres-service:5432/appdb"

---

# Backend Service
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  labels:
    app: backend
    tier: backend
spec:
  type: ClusterIP
  selector:
    app: backend
  ports:
  - port: 80
    targetPort: 80
    name: http

---

# Frontend ConfigMap
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
  labels:
    app: frontend
    tier: frontend
data:
  index.html: |
    <!DOCTYPE html>
    <html>
    <head>
        <title>Moja Aplikacja K8s</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 40px; text-align: center; }
            .container { max-width: 800px; margin: 0 auto; }
            button { padding: 10px 20px; margin: 10px; background: #007cba; color: white; border: none; cursor: pointer; }
            button:hover { background: #005a8b; }
            .result { background: #f0f0f0; padding: 20px; margin: 20px 0; display: none; }
            img { max-width: 200px; margin: 20px 0; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>Witaj w mojej aplikacji Kubernetes!</h1>
            <p>Ta aplikacja składa się z:</p>
            <ul>
                <li>Frontend (Nginx) - ta strona</li>
                <li>Backend API - HTTPBin service</li>
                <li>Baza danych - PostgreSQL</li>
            </ul>
            
            <h2>Test Backend API</h2>
            <button onclick="testBackend()">Testuj Backend</button>
            <button onclick="testDatabase()">Test Bazy Danych</button>
            
            <div id="result" class="result">
                <h3>Wynik:</h3>
                <pre id="output"></pre>
            </div>
        </div>
        
        <script>
            async function testBackend() {
                try {
                    const response = await fetch('/api/get');
                    const data = await response.json();
                    showResult(JSON.stringify(data, null, 2));
                } catch (error) {
                    showResult('Błąd: ' + error.message);
                }
            }
            
            async function testDatabase() {
                showResult('Test bazy danych - sprawdź logi PostgreSQL pod:\nkubectl logs -l app=postgres');
            }
            
            function showResult(text) {
                document.getElementById('result').style.display = 'block';
                document.getElementById('output').textContent = text;
            }
        </script>
    </body>
    </html>
  nginx.conf: |
    server {
        listen 80;
        server_name localhost;
        
        location / {
            root /usr/share/nginx/html;
            index index.html;
        }
        
        location /api/ {
            proxy_pass http://backend-service/;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
        }
    }

---

# Frontend Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  labels:
    app: frontend
    tier: frontend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        tier: frontend
        version: "1.0"
    spec:
      containers:
      - name: nginx
        image: nginx:1.21
        ports:
        - containerPort: 80
          name: http
        volumeMounts:
        - name: html-config
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
        - name: nginx-config
          mountPath: /etc/nginx/conf.d/default.conf
          subPath: nginx.conf
        - name: images
          mountPath: /usr/share/nginx/html/images
          readOnly: true
        resources:
          requests:
            cpu: 50m
            memory: 64Mi
          limits:
            cpu: 200m
            memory: 128Mi
      volumes:
      - name: html-config
        configMap:
          name: frontend-config
      - name: nginx-config
        configMap:
          name: frontend-config
      - name: images
        configMap:
          name: app-images
          optional: true

---

# Frontend Service
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
  labels:
    app: frontend
    tier: frontend
spec:
  type: NodePort
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
    nodePort: 30080
    name: http